#include "tree.hpp"

#include "pcg_random.hpp"

#include <catch2/benchmark/catch_benchmark.hpp>
#include <catch2/catch_get_random_seed.hpp>
#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators.hpp>

std::vector<std::string> tree_strings = {};

TEST_CASE("tree constructor", "[tree]") {
  const std::string tree_str = "((a,b),c);";

  biogeosim::tree_t tree(tree_str);

  CHECK(tree.to_newick() == "((a:0,b:0)1:0,c:0)0:0");
  CHECK(tree.node_count() == 5);
  CHECK(tree.leaf_count() == 3);
}

TEST_CASE("tree sample", "[tree]") {
  constexpr size_t regions = 4;
  constexpr double dis     = 1.0;
  constexpr double ext     = 1.0;

  const std::string tree_str = GENERATE(
      "((c:0.9295,(a:0.0441,b:0.2992):0.3751):0.8417,(d:0.2104,e:0.2918):0."
      "1917);",
      "((((i:0.7595,g:0.7032):0.4222,d:0.9406):0.3103,(j:0.6265,a:0.7083):0."
      "9747):0.6039,(((c:0.6288,e:0.0113):0.9947,b:0.0395):0.2410,(h:0.7842,f:"
      "0.6276):0.9940):0.0541);",
      "(((((m:0.6542,(((l:0.1626,f:0.7257):0.8187,b:0.7155):0.4225,t:0.3027):"
      "0.9636):0.5567,r:0.7460):0.9108,((i:0.0655,((h:0.0896,q:0.0281):0.3810,j:"
      "0.3597):0.3712):0.4534,c:0.8750):0.2771):0.9337,(x:0.3737,(((s:0.3850,(("
      "v:0.4008,u:0.3782):0.7830,e:0.1389):0.4490):0.4036,(n:0.6214,g:0.5012):"
      "0.9841):0.0668,(p:0.1784,o:0.8225):0.7271):0.4112):0.0430):0.0360,((y:0."
      "6506,w:0.0006):0.6659,(k:0.4333,(a:0.8683,d:0.9485):0.4636):0.5255):0."
      "0256);",
      "((((((k:0.1087,n:0.6052):0.0388,m:0.9081):0.1114,(((l:0.4195,o:0.6419):"
      "0.3033,p:0.8263):0.8708,a:0.9677):0.4028):0.7402,((c:0.7193,t:0.9417):0."
      "9130,((f:0.2565,q:0.9085):0.2625,e:0.5796):0.9315):0.3620):0.1491,i:0."
      "4533):0.2228,((g:0.7994,(h:0.0133,b:0.6014):0.4525):0.9739,(y:0.9514,(("
      "r:0.5147,v:0.3920):0.8722,((((w:0.8422,s:0.4481):0.9721,(d:0.4430,u:0."
      "3855):0.5479):0.1670,x:0.0659):0.0981,j:0.8295):0.2416):0.9999):0.8452):"
      "0.4681);",
      "(((q:0.3297,((p:0.0856,(v:0.0593,u:0.0593):0.0263):0.0409,k:0.1265):0."
      "2032):0.1325,((l:0.2430,(((t:0.0985,j:0.0985):0.0575,w:0.1561):0.0155,g:"
      "0.1715):0.0715):0.1494,((a:0.2070,(m:0.1291,(i:0.0700,y:0.0700):0.0591):"
      "0.0779):0.1192,s:0.3262):0.0662):0.0698):0.5378,(((b:0.7086,(o:0.6235,d:"
      "0.6235):0.0851):0.1149,x:0.8235):0.1054,((r:0.3749,(h:0.2481,n:0.2481):"
      "0.1268):0.1448,((f:0.3615,e:0.3615):0.1270,c:0.4885):0.0312):0.4093):0."
      "0710);",
      "(((m:0.6730,(e:0.8794,t:0.4614):0.8049):0.6853,o:0.5066):0.7346,(((((v:"
      "0.1677,j:0.2526):0.9712,s:0.9974):0.0720,((((w:0.5285,r:0.3024):0.5860,("
      "x:0.4088,f:0.9375):0.6798):0.1282,(a:0.8254,(h:0.1893,c:0.3389):0.4726):"
      "0.4141):0.2241,(b:0.3294,n:0.0581):0.3002):0.3602):0.3811,((l:0.0385,u:"
      "0.3713):0.2086,(y:0.7408,p:0.3104):0.7948):0.9655):0.0616,(k:0.8828,(d:"
      "0.2413,((g:0.1857,q:0.5199):0.0149,i:0.2183):0.8222):0.9022):0.4360):0."
      "1311);",
      "((((((bc:0.4776,ay:0.7903):0.9055,av:0.8857):0.4332,bu:0.3849):0.0633,(("
      "(am:0.4353,ar:0.3888):0.3007,bd:0.0723):0.6258,br:0.2329):0.0544):0."
      "3567,(((az:0.4034,(ax:0.2845,(ba:0.8297,bi:0.1441):0.4942):0.2990):0."
      "3319,bm:0.0835):0.4959,(((as:0.1910,((ao:0.5054,bs:0.9052):0.9758,(((bq:"
      "0.8055,bn:0.8069):0.5852,(((be:0.5122,aj:0.7586):0.4905,aa:0.6879):0."
      "1023,ad:0.6922):0.9281):0.9610,(ae:0.6228,(bl:0.6810,ac:0.6130):0.4412):"
      "0.7726):0.9178):0.5476):0.2011,((ak:0.5822,bf:0.2158):0.4411,((bh:0."
      "8858,aq:0.4173):0.3254,(((bw:0.0969,af:0.1084):0.8695,((ai:0.7943,((ab:"
      "0.9320,ah:0.2806):0.2007,ap:0.1284):0.6961):0.9606,bb:0.4768):0.4434):0."
      "4964,((au:0.1881,at:0.6021):0.0654,(bj:0.2084,bt:0.8958):0.5224):0.8081)"
      ":0.6033):0.6513):0.5546):0.1693,al:0.1091):0.3623):0.5229):0.0253,(((("
      "bx:0.6625,bp:0.7260):0.6542,bo:0.9611):0.0912,(bk:0.7117,(ag:0.8720,bv:"
      "0.3130):0.9267):0.1174):0.8122,(an:0.3357,(bg:0.6296,aw:0.7062):0.2151):"
      "0.9892):0.8198);",
      "(((((al:0.0233,(bk:0.1176,dd:0.0053):0.5242):0.5778,((cd:0.8594,cs:0."
      "5168):0.3463,bp:0.2672):0.5704):0.2396,((dr:0.1696,an:0.9782):0.9636,("
      "bo:0.6071,((bt:0.9766,aw:0.2374):0.0738,(bu:0.1708,bv:0.4934):0.8570):0."
      "6490):0.2226):0.5197):0.9300,((((((ap:0.5084,(aj:0.2885,cu:0.9129):0."
      "0724):0.2751,(be:0.4499,ci:0.2584):0.1283):0.8701,((dl:0.8751,cx:0.0494)"
      ":0.9113,(((bs:0.8635,cl:0.5894):0.6672,bd:0.4370):0.6441,((bj:0.6113,("
      "da:0.7343,((cf:0.7658,bm:0.4641):0.3756,(cr:0.5879,cy:0.6186):0.1132):0."
      "6390):0.6585):0.3513,bg:0.5691):0.7446):0.5594):0.3241):0.5126,(cb:0."
      "5231,(cc:0.8525,dv:0.5114):0.0009):0.2579):0.0859,((cp:0.1658,dt:0.1267)"
      ":0.8628,((dc:0.2246,bc:0.0920):0.3173,bi:0.7059):0.0545):0.9141):0.2430,"
      "(((ad:0.9511,cg:0.7501):0.0872,ak:0.4969):0.9500,((bn:0.6892,ct:0.1385):"
      "0.5274,((ab:0.1342,(((dg:0.0273,ay:0.6002):0.5534,bf:0.5035):0.0039,br:"
      "0.2307):0.5852):0.6521,at:0.0137):0.6767):0.8849):0.0824):0.0220):0."
      "9774,(((((bb:0.8300,cn:0.4188):0.2651,(ax:0.8863,dq:0.9689):0.4168):0."
      "0208,(ch:0.4013,df:0.4061):0.5514):0.4229,((bz:0.2190,ai:0.4707):0.2718,"
      "(ds:0.2104,(cq:0.8730,av:0.6227):0.2150):0.3068):0.3095):0.0234,(((((aq:"
      "0.5171,(((bq:0.4422,(dm:0.2000,ao:0.6666):0.2473):0.7852,au:0.3771):0."
      "0287,ae:0.4361):0.2300):0.8655,(cw:0.9887,dn:0.5322):0.7556):0.2112,(by:"
      "0.4142,(ca:0.2384,dj:0.4766):0.9259):0.7632):0.6062,(ag:0.0139,dh:0."
      "5673):0.5654):0.0550,(((cv:0.5163,((am:0.2288,as:0.0472):0.7107,(ah:0."
      "5373,dk:0.5830):0.8430):0.7729):0.3186,(((((co:0.7792,(db:0.3728,du:0."
      "1678):0.3284):0.4280,(dp:0.2114,ac:0.4003):0.8447):0.4707,ar:0.0496):0."
      "6362,((bw:0.6029,bl:0.3904):0.0056,ce:0.9459):0.4869):0.0943,(cm:0.2536,"
      "(de:0.8693,(ba:0.0314,(af:0.6493,di:0.5192):0.8823):0.5550):0.8340):0."
      "2837):0.4929):0.4916,((cj:0.7756,(cz:0.4201,bx:0.2293):0.2571):0.4488,(("
      "aa:0.5272,(az:0.6393,(do:0.0054,bh:0.6231):0.1945):0.9229):0.9103,ck:0."
      "2594):0.1416):0.2421):0.7125):0.9754):0.4298);");

  biogeosim::substitution_model_t model(dis, ext, regions, true);
  biogeosim::dist_t               init_dist = {0b0101, regions};
  model.set_cladogenesis_params(
      {.copy = 1.0, .sympatry = 1.0, .allopatry = 1.0, .jump = 1.0});

  biogeosim::tree_t tree(tree_str);

  pcg64_fast gen(Catch::getSeed());

  BENCHMARK("sample: " + std::to_string(tree.leaf_count())) {
    tree.sample(init_dist, model, gen);
  };
}
